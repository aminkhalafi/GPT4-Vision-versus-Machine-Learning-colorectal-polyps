import os
import cv2
import numpy as np
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import img_to_array, load_img
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.resnet50 import preprocess_input
from sklearn.utils import shuffle
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    classification_report, roc_auc_score, roc_curve, auc, confusion_matrix)
import time
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.calibration import calibration_curve
import seaborn as sns

# Function to preprocess image for ResNet50
def preprocess_image_resnet(image_path):
    img = load_img(image_path, target_size=(300, 300))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    return img_array

# Load ResNet50 model
base_model = ResNet50(weights='resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, input_shape=(300, 300, 3))

# Freeze the layers of the base model
base_model.trainable = False

# Build binary classification model on top of the pretrained ResNet50
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(1, activation='sigmoid')  # Binary classification output
])

# Compile the model
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Paths to data
train_annotation_file = 'D:\\research\\colonoscopy\\ai_colon\\polyp_images\\keys\\all_keys_labmod_aug.csv'
train_image_folder = 'D:\\research\\colonoscopy\\ai_colon\\polyp_images\\all'
test_annotation_file = 'D:\\research\\colonoscopy\\ai_colon\\test_set\\keys_test\\all_test_labmod.csv'
test_image_folder = 'D:\\research\\colonoscopy\\ai_colon\\test_set\\all_test'
normal_train_folder = 'D:\\research\\colonoscopy\\ai_colon\\normal_train_set'
normal_test_folder = 'D:\\research\\colonoscopy\\ai_colon\\normal_test_set'

# Load training and testing sets
train_annotations = pd.read_csv(train_annotation_file)
train_images = []
train_labels = []

for index, row in train_annotations.iterrows():
    image_name = row['image_name']
    image_path = os.path.join(train_image_folder, image_name)
    processed_image = preprocess_image_resnet(image_path)

    if processed_image is not None:
        train_images.append(processed_image)
        train_labels.append(1)  # 1 for polyp
    else:
        print(f"Error loading image: {image_name}")

# Load testing set
test_annotations = pd.read_csv(test_annotation_file)
test_images = []
test_labels = []

for index, row in test_annotations.iterrows():
    image_name = row['image_name']
    image_path = os.path.join(test_image_folder, image_name)
    processed_image = preprocess_image_resnet(image_path)

    if processed_image is not None:
        test_images.append(processed_image)
        test_labels.append(1)  # 1 for polyp
    else:
        print(f"Error loading image: {image_name}")

# Load normal training set
normal_train_images = os.listdir(normal_train_folder)

for normal_image_name in normal_train_images:
    normal_image_path = os.path.join(normal_train_folder, normal_image_name)
    processed_normal_image = preprocess_image_resnet(normal_image_path)

    if processed_normal_image is not None:
        train_images.append(processed_normal_image)
        train_labels.append(0)  # 0 for normal
    else:
        print(f"Error loading image: {normal_image_name}")

# Load normal testing set
normal_test_images = os.listdir(normal_test_folder)

for normal_image_name in normal_test_images:
    normal_image_path = os.path.join(normal_test_folder, normal_image_name)
    processed_normal_image = preprocess_image_resnet(normal_image_path)

    if processed_normal_image is not None:
        test_images.append(processed_normal_image)
        test_labels.append(0)  # 0 for normal
    else:
        print(f"Error loading image: {normal_image_name}")

# Convert lists to numpy arrays
X_train = np.vstack(train_images)
y_train = np.array(train_labels)
X_test = np.vstack(test_images)
y_test = np.array(test_labels)

# Shuffle data to randomize order
X_train, y_train = shuffle(X_train, y_train, random_state=42)
X_test, y_test = shuffle(X_test, y_test, random_state=42)

start_time = time.time()
# Train the binary classification model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)
end_time = time.time()

# Evaluate the model on the test set
inference_start_time = time.time()
y_pred = model.predict(X_test)
inference_end_time = time.time()
y_pred_binary = (y_pred > 0.5).astype(int)

# Evaluation metrics
accuracy = accuracy_score(y_test, y_pred_binary)
precision = precision_score(y_test, y_pred_binary)
recall = recall_score(y_test, y_pred_binary)
f1 = f1_score(y_test, y_pred_binary)
class_report = classification_report(y_test, y_pred_binary)
roc_auc = roc_auc_score(y_test, y_pred)
training_time = end_time - start_time
inference_time = inference_end_time - inference_start_time
conf_matrix = confusion_matrix(y_test, y_pred_binary)

print("Training Time:", training_time, "seconds")
print("Inference Time:", inference_time, "seconds")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1)
print("Classification Report:\n", class_report)
print("ROC AUC:", roc_auc)
print("confusion matrix:", conf_matrix)

# Plot AUC curve
fpr, tpr, thresholds = roc_curve(y_test, y_pred)
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")

plt.savefig('auc_curve.png', format='png')
plt.savefig('auc_curve.jpg', format='jpeg')
plt.savefig('auc_curve.pdf', format='pdf')

plt.show()


prob_true, prob_pred = calibration_curve(y_test, y_pred, n_bins=10)

plt.figure()
plt.plot(prob_pred, prob_true, marker='o', label='Calibration Curve')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Perfectly Calibrated')
plt.xlabel('Mean Predicted Probability')
plt.ylabel('Fraction of Positives')
plt.title('Calibration Curve')
plt.legend(loc='upper left')

plt.savefig('calibration_curve.png', format='png')
plt.savefig('calibration_curve.jpg', format='jpeg')
plt.savefig('calibration_curve.pdf', format='pdf')

plt.show()

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')

plt.savefig('confusion_matrix.png', format='png')
plt.savefig('confusion_matrix.jpg', format='jpeg')
plt.savefig('confusion_matrix.pdf', format='pdf')

plt.show()
